!<arch>
0-isupper.c/    0           0     0     644     231       `
#include "main.h"
/**
 * _isupper - detect upper case alphabets
 *
 * @c: input character
 *
 * Return: (1) for true (0) false
 *
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     337       `
#include "main.h"
/**
 * _memset - a function that fills a memory with a constant byte
 *
 * @s: pointer to the no of memory byte
 * @b: a byte constant
 * @n: no of byte of the memory
 *
 * Return: pointer s
 */
char *_memset(char *s, char b, unsigned int n)
{
	int i;

	for (i = 0; n > 0; i++)
	{
		s[i] = b;
		n--;
	}

	return (s);
}

0-strcat.c/     0           0     0     644     415       `
#include "main.h"
/**
 * _strcat - concertenate two strings
 *
 * @dest: the destination string
 * @src: the source string
 *
 * Return: destination string (char *ptr)
 */
char *_strcat(char *dest, char *src)
{
	int len1, len2, i;

	for (len1 = 0; dest[len1] != '\0'; len1++)
	{

	}

	for (len2 = 0; src[len2] != '\0'; len2++)
	{

	}
	for (i = 0; i <= len2; i++)
	{
		dest[len1 + i] = src[i];
	}

	return (dest);
}

100-atoi.c/     0           0     0     644     573       `
#include "main.h"

/**
 * _atoi - converts a string to an integer.
 * @s: input string.
 * Return: integer.
 */
int _atoi(char *s)
{
	unsigned int count = 0, size = 0, oi = 0, pn = 1, m = 1, i;

	while (*(s + count) != '\0')
	{
		if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
			break;

		if (*(s + count) == '-')
			pn *= -1;

		if ((*(s + count) >= '0') && (*(s + count) <= '9'))
		{
			if (size > 0)
				m *= 10;
			size++;
		}
		count++;
	}

	for (i = count - size; i < count; i++)
	{
		oi = oi + ((*(s + i) - 48) * m);
		m /= 10;
	}
	return (oi * pn);
}

1-isdigit.c/    0           0     0     644     243       `
#include "main.h"
/**
 * _isdigit - check if parameter is a digit or character
 *
 * @c: parameter
 * Return: 1 if its a number and 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     337       `
#include "main.h"
/**
 * _memcpy - a function that copies memory area
 * @dest: memory where copied memory is stored
 * @src: memory to be copied
 * @n: no of bytes
 * Return: pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int i;

	for (i = 0; n > 0; i++)
	{
		dest[i] = src[i];
		n--;
	}

	return (dest);
}

1-strncat.c/    0           0     0     644     436       `
#include "main.h"
/**
 * _strncat - a function that concertenate two strings
 *
 * @dest: destination string
 * @src: source string
 * @n: no of element to concertenate from src
 * Return: dest + n of src
 */
char *_strncat(char *dest, char *src, int n)
{
	int len_dest, i;

	for (len_dest = 0; dest[len_dest] != '\0'; len_dest++)
	{

	}

	for (i = 0; src[i] != 0 && i < n; i++)
	{
		dest[len_dest + i] = src[i];
	}


	return (dest);
}
2-strchr.c/     0           0     0     644     207       `
#include "main.h"
/**
 * _strchr - main file
 * @s: input
 * @c: input
 * Return: 0
 */
char *_strchr(char *s, char c)
{
	while (*s >= '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		s++;
	}
	return (0);
}

2-strlen.c/     0           0     0     644     257       `
#include "main.h"
/**
 * _strlen - function that returns length of string
 *
 * @s: character of strings
 *
 * Return: (0)
 */
int _strlen(char *s)
{
	int total_len;

	total_len = 0;
	while (s[total_len] != '\0')
	{
	total_len++;
	}

	return (total_len);
}

2-strncpy.c/    0           0     0     644     383       `
#include "main.h"
/**
 * _strncpy - copies a string
 *
 * @dest: destination string
 * @src: source string
 * @n: no of strins to copy
 * Return: return dest char pointer to the string
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; src[i] != '\0' && i < n; i++)
	{
		dest[i] = src[i];
	}

	for (i = i; i < n; i++)
	{
		dest[i] = '\0';
	}

	return (dest);
}

3-islower.c/    0           0     0     644     349       `
#include "main.h"
/**
 * _islower - Shows 1 if the input is a
 * lowercase character. Another cases, shows
 * 0
 *
 * @c: The character in ASCII code
 *
 * Return: 1 for lowercase character. 0 for the rest.
 */
int _islower(int c)
{
	char i;
	int lower = 0;

	for (i = 'a'; i <= 'z'; i++)
	{
		if (i == c)
		{
		lower = 1;
		}
	}
	return (lower);
}

3-puts.c/       0           0     0     644     209       `
#include "main.h"
/**
 * _puts - print string followed by new line
 *
 * @str: prints string
 */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     278       `
#include "main.h"
/**
 * _strcmp - compare two strings
 *
 * @s1: first string
 * @s2: second string
 *
 * Return: (0) when its same
 */
int _strcmp(char *s1, char *s2)
{
	int i;
	int b = 0;

	for (i = 0; s1[i] != '\0' && b == 0; i++)
	{
		b = s1[i] - s2[i];
	}

	return (b);
}
3-strspn.c/     0           0     0     644     371       `
#include "main.h"
/**
 * _strspn - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
		for (r = 0; accept[r]; r++)
		{
			if (*s == accept[r])
			{
				n++;
				break;
			}
			else if (accept[r + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     429       `
#include "main.h"
/**
 * _isalpha - return 1 when c is cap or low
 *
 * Description: we are using _putchar
 *
 * @c: collect the character
 *
 * Return: 1 if c is low or cap otherwise 0
 */
int _isalpha(int c)
{
	char lower, upper;
	int letter = 0;

	for (lower = 'a'; lower <= 'z'; lower++)
	{
		for (upper = 'A'; upper <= 'Z'; upper++)
		{
			if (lower == c || upper == c)
			{
				letter = 1;
			}

		}
	}
	return (letter);
}

4-strpbrk.c/    0           0     0     644     365       `
#include "main.h"
/**
 * _strpbrk - the main function search strings for set of byte
 *
 * @s: string 1
 * @accept: string 2
 *
 * Return: pointer to byte
 */
char *_strpbrk(char *s, char *accept)
{
	char *temp;

	for (; *s != '\0'; s++)
	{
		temp = accept;
		for (; *temp != '\0'; temp++)
		{
			if (*s == *temp)
			{
				return (s);
			}
		}
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     457       `
#include "main.h"
/**
 * _strstr - function finds the first occurrence of a
 * substring in a string
 * @needle: substring
 * @haystack: string
 *
 * Return: char pointer to haystack from the subset found
 */
char *_strstr(char *haystack, char *needle)
{

	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}

		if (*p == '\0')
			return (haystack);
	}
	return (0);
}

6-abs.c/        0           0     0     644     262       `
#include "main.h"
/**
 * _abs - function that computes the absolute value of an int
 *@r: the value
 * Description: The standard library provides a similar funct..
 *
 * Return: (0)
 *
 */
int _abs(int r)
{
	if (r >= 0)

		return (r);
	else
		return (r * -1);
}
9-strcpy.c/     0           0     0     644     311       `
#include "main.h"
/**
 * *_strcpy - pointer to a character
 *
 * @dest: string 1 pointer to a char
 * @src: string 2 pointer to a char
 * Return: character (dest)
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

